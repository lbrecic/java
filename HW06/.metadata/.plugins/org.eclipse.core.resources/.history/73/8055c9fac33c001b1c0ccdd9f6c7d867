package hr.fer.oprpp1.math;

public class ComplexPolynomial {
	Complex[] factors;
	
	// constructor
	public ComplexPolynomial(Complex... factors) {
		this.factors = new Complex[factors.length];
		
		for (int i = 0; i < factors.length; i++) {
			this.factors[i] = factors[i];
		}
	}
	
	// returns order of this polynom; eg. For (7+2i)z^3+2z^2+5z+1 returns 3
	public short order() {
		return ((short)(this.factors.length - 1));
	}
	
	// computes a new polynomial this*p
	public ComplexPolynomial multiply(ComplexPolynomial p) {
		Complex[] c = new Complex[this.order() + p.order()];
		
		for (int i = 0; i < this.factors.length; i++) {
			for (int j = 0; j < p.factors.length; j++) {
				c[i + j] = c[i + j].add(this.factors[i].multiply(p.factors[j]));
			}
		}
		
		return new ComplexPolynomial(c);
	}
	
	// computes first derivative of this polynomial; for example, for
	// (7+2i)z^3+2z^2+5z+1 returns (21+6i)z^2+4z+5
	public ComplexPolynomial derive() {
		Complex[] factors = new Complex[this.factors.length - 1];
		
		for (int i = 1; i < this.factors.length; i++) {
			factors[i - 1] = this.factors[i].multiply(new Complex(i, 0));
		}
		
		return new ComplexPolynomial(factors);
	}
	
	// computes polynomial value at given point z
	public Complex apply(Complex z) {
		Complex c = new Complex();
		
		for (int i = 0; i < this.factors.length; i++) {
			c = c.add(this.factors[i].multiply(z.power(i)));
		}
		
		return c;
	}
	
	@Override
	public String toString() {
		
	}
	
}