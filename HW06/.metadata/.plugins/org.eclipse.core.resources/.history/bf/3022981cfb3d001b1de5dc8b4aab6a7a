package hr.fer.oprpp1.fractals;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicBoolean;

import hr.fer.zemris.java.fractals.viewer.IFractalProducer;
import hr.fer.zemris.java.fractals.viewer.IFractalResultObserver;
import hr.fer.oprpp1.math.Complex;
import hr.fer.oprpp1.math.ComplexPolynomial;
import hr.fer.oprpp1.math.ComplexRootedPolynomial;

public class FractalsParallel {

	private static final double ROOT_THRESHOLD = 0.002;
	private static final double CONVERGENCE_THRESHOLD = 1E-3;

	public static class CalculateJob implements Runnable {
		private double reMin;
		private double reMax;
		private double imMin;
		private double imMax;
		private int width;
		private int height;
		private int yMin;
		private int yMax;
		private int m;
		private short[] data;
		AtomicBoolean cancel;
		private ComplexRootedPolynomial polynomialRooted;
		public static CalculateJob NO_JOB = new CalculateJob();

		private CalculateJob() {
		}

		public CalculateJob(double reMin, double reMax, double imMin, double imMax, int width, int height, int yMin,
				int yMax, int m, short[] data, AtomicBoolean cancel, ComplexRootedPolynomial polynomialRooted) {
			super();
			this.reMin = reMin;
			this.reMax = reMax;
			this.imMin = imMin;
			this.imMax = imMax;
			this.width = width;
			this.height = height;
			this.yMin = yMin;
			this.yMax = yMax;
			this.m = m;
			this.data = data;
			this.cancel = cancel;
			this.polynomialRooted = polynomialRooted;
		}

		@Override
		public void run() {
			FractalsParallel.calculate(reMin, reMax, imMin, imMax, width, height, yMin, yMax, m, data, cancel,
					polynomialRooted);
		}

	}

	public static class Producer implements IFractalProducer {

		private int noOfThreads;
		private int noOfJobs;
		private ComplexRootedPolynomial polynomialRooted;

		public Producer(int noOfThreads, int noOfJobs, ComplexRootedPolynomial polynomialRooted) {
			this.noOfThreads = noOfThreads;
			this.noOfJobs = noOfJobs;
			this.polynomialRooted = polynomialRooted;
		}

		@Override
		public void produce(double reMin, double reMax, double imMin, double imMax, int width, int height,
				long requestNo, IFractalResultObserver observer, AtomicBoolean cancel) {
			System.out.println("Zapocinjem izracun...");
			int maxIter = 16 * 16 * 16;
			short[] data = new short[width * height];
			int noOfRowsPerTrack = height / ((noOfJobs < 1 || noOfJobs > height) ? 1 : noOfJobs);
			noOfThreads = (noOfThreads > Runtime.getRuntime().availableProcessors()
					? Runtime.getRuntime().availableProcessors()
					: noOfThreads);
			
			final BlockingQueue<CalculateJob> queue = new LinkedBlockingQueue<>();
			Thread[] workers = new Thread[noOfThreads];
			
			for (int i = 0; i < workers.length; i++) {
				workers[i] = new Thread(new Runnable() {

					@Override
					public void run() {
						while (true) {
							CalculateJob job = null;
							try {
								job = queue.take();
								if (job == CalculateJob.NO_JOB)
									break;
							} catch (InterruptedException e) {
								continue;
							}
							job.run();
						}

					}

				});
			}
			
			for (int i = 0; i < workers.length; i++) {
				workers[i].start();
			}

			for (int i = 0; i < noOfJobs; i++) {
				int yMin = i * noOfRowsPerTrack;
				int yMax = (i + 1) * noOfRowsPerTrack - 1;
				if (i == noOfJobs - 1) {
					yMax = height - 1;
				}
				CalculateJob job = new CalculateJob(reMin, reMax, imMin, imMax, width, height, yMin, yMax, maxIter,
						data, cancel, polynomialRooted);
				while (true) {
					try {
						queue.put(job);
						break;
					} catch (InterruptedException e) {
					}
				}
			}
			for (int i = 0; i < workers.length; i++) {
				while (true) {
					try {
						queue.put(CalculateJob.NO_JOB);
						break;
					} catch (InterruptedException e) {
					}
				}
			}
			for (int i = 0; i < workers.length; i++) {
				while (true) {
					try {
						workers[i].join();
						break;
					} catch (InterruptedException e) {
					}
				}
			}

			System.out.println("Racunanje gotovo. Idem obavijestiti promatraca tj. GUI!");
			observer.acceptResult(data, (short) maxIter, requestNo);
		}

	}

	public static void calculate(double reMin, double reMax, double imMin, double imMax, int width, int height,
			int yMin, int yMax, int m, short[] data, AtomicBoolean cancel, ComplexRootedPolynomial polynomialRooted) {
		int offset = 0;
		int maxIter = 16 * 16 * 16;
		ComplexPolynomial polynomial = polynomialRooted.toComplexPolynom();
		data = new short[width * height];
		for (int y = 0; y < height; y++) {
			if (cancel.get())
				break;
			for (int x = 0; x < width; x++) {
				double cre = x / (width - 1.0) * (reMax - reMin) + reMin;
				double cim = (height - 1.0 - y) / (height - 1) * (imMax - imMin) + imMin;
				Complex zn = new Complex(cre, cim);
				double module = 0;
				int iter = 0;
				do {
					Complex numerator = polynomial.apply(zn);
					Complex denominator = polynomial.derive().apply(zn);
					Complex znold = zn;
					Complex fraction = numerator.divide(denominator);
					zn = zn.sub(fraction);
					module = znold.sub(zn).module();
					iter++;
				} while (module > CONVERGENCE_THRESHOLD && iter < maxIter);
				int index = polynomialRooted.indexOfClosestRootFor(zn, ROOT_THRESHOLD);
				data[offset++] = (short) (index + 1);
			}
		}
	}
}
