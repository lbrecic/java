package hr.fer.oprpp1.custom.collections;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

public class LinkedListIndexedCollectionTest {
	@Test
	public void testEmptyConstructor() {
		LinkedListIndexedCollection list = new LinkedListIndexedCollection();
		assertEquals(0, list.size());
	}
	
	@Test
	public void testCollectionCopyingConstructor() {
		LinkedListIndexedCollection list1 = new LinkedListIndexedCollection();
		list1.add("Zagreb");
		list1.add("Split");
		LinkedListIndexedCollection list2 = new LinkedListIndexedCollection(list1);
		assertEquals(2, list2.size());
	}
	
	@Test
	public void testNullCollectionConstructorThrow() {
		assertThrows(NullPointerException.class, () -> new LinkedListIndexedCollection(null));
	}
	
	@Test
	public void testAddNullValueThrow() {
		LinkedListIndexedCollection list = new LinkedListIndexedCollection(null);
		assertThrows(NullPointerException.class, () -> list.add(null));
	}
	
	@Test
	public void testAddValidElement() {
		LinkedListIndexedCollection list = new LinkedListIndexedCollection(null);
		list.add("Zagreb");
		list.add("Split");
		assertEquals(2, list.size());
	}
	
	@Test
	public void testGetInvalidIndexThrow() {
		LinkedListIndexedCollection list = new LinkedListIndexedCollection();
		assertThrows(IndexOutOfBoundsException.class, () -> list.get(2));
	}
	
	@Test
	public void testGet() {
		LinkedListIndexedCollection list = new LinkedListIndexedCollection();
		list.add("Zagreb");
		list.add("Split");
		list.add("OSijek");
		assertEquals("Split", list.get(1));
	}
	
	@Test
	public void testClear()  {
		LinkedListIndexedCollection list = new LinkedListIndexedCollection();
		list.add("Zagreb");
		list.add("Split");
		list.add("OSijek");
		list.clear();
		assertEquals(0,  list.size());
	}
	
	@Test
	public void testInsertOnInvalidPositionArgumentThrow() {
		LinkedListIndexedCollection list = new LinkedListIndexedCollection();
		assertThrows(IndexOutOfBoundsException.class, () -> list.insert("Zagreb", 2));
	}
	
	@Test
	public void testInsertInvalidNullValueArgumentThrow() {
		LinkedListIndexedCollection list = new LinkedListIndexedCollection();
		list.add("Zagreb");
		list.add("Split");
		assertThrows(NullPointerException.class, () -> list.insert(null, 1));
	}
	
	@Tes
	public void testValidInsert() {
		LinkedListIndexedCollection list = new LinkedListIndexedCollection();
		list.add("Zagreb");
		list.add("Split");
		list.add("OSijek");
		list.insert("Dubrovnik", 1);
	}
}
