package hr.fer.oprpp1.custom.collections;

public class ArrayIndexedCollection extends Collection {
	private int size;
	private Object[] elements;
	
	public ArrayIndexedCollection(int initialCapacity) {
		if (initialCapacity < 1) throw new IllegalArgumentException();
		this.size = initialCapacity;
		this.elements = new Object[size];
	}
	
	public ArrayIndexedCollection() {
		this(16);
	}
	
	public ArrayIndexedCollection(Collection collection, int initialCapacity) {
		if (collection == null) throw new NullPointerException();
		size = collection.size() > initialCapacity ? collection.size() : initialCapacity;
		this.elements = collection.toArray();
	}

	public ArrayIndexedCollection(Collection collection) {
		this(collection, 0);
	}
	
	public boolean isEmpty() {
		return this.size() == 0;
	}
	
	public int size() {
		return this.size;
	}
	
	public void add(Object value) {}
	
	public boolean contains(Object value) {
		return false;
	}
	
	public boolean remove(Object value) {
		return false;	
	}
	
	public Object[] toArray() {
		throw new UnsupportedOperationException();
	}
	
	public void forEach(Processor processor) {
		for(int i = 0; i < this.size(); i++) {
			processor(this[i]);
		}
	}
	
	public void addAll(Collection other) {
		class AddAllProcessor extends Processor {
			public void process(Object value) {
				add(value);
			}
		}
		
		AddAllProcessor processor = new AddAllProcessor();
		
		other.forEach(processor);
	}
	
	public void clear() {}
	
	
}
