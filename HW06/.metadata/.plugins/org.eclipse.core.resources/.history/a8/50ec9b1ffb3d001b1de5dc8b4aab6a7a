package hr.fer.oprpp1.fractals;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import hr.fer.zemris.java.fractals.viewer.FractalViewer;
import hr.fer.oprpp1.math.Complex;
import hr.fer.oprpp1.math.ComplexRootedPolynomial;

public class NewtonParallel {

	public static void main(String[] args) {
		System.out.println("Welcome to Newton-Raphson iteration-based fractal viewer.\r\n"
				+ "Please enter at least two roots, one root per line. Enter 'done' when done.");
		List<Complex> roots = new ArrayList<>();
		Scanner sc = new Scanner(System.in);
		String in;
		int counter = 1;
		do {
			System.out.print("Root " + counter + "> ");
			in = sc.nextLine();
			if (!in.equals("done"))
				roots.add(Complex.parse(in));
			counter++;
		} while (!in.equals("done"));
		sc.close();

		if (roots.size() < 2) {
			System.out.println("Too few arguments!");
		} else {
			System.out.println("Image of fractal will appear shortly. Thank you.");
		}

		int[] threadsAndJobs = getThreadsAndJobsFromArgs(args);
		FractalViewer.show(new FractalsParallel.Producer(threadsAndJobs[0], threadsAndJobs[1], new ComplexRootedPolynomial(Complex.ONE, roots.toArray(new Complex[roots.size()]))));
	}

	private static int[] getThreadsAndJobsFromArgs(String[] args) {
		int[] array = new int[2];
		if (args.length == 0) {
			array[0] = Runtime.getRuntime().availableProcessors();
			array[1] = array[0] * 4;
		}
		if (args.length == 1) {
			if (args[0].contains("--workers")) {
				array[0] = Integer.parseInt(args[0].split("=")[1]);
				array[1] = array[0] * 4;
			} else if (args[0].contains("--tracks")) {
				array[1] = Integer.parseInt(args[0].split("=")[1]);
				array[0] = Runtime.getRuntime().availableProcessors();
			}
		} else if (args.length == 2) {
			if (args[0].contains("--workers") && args[1].contains("--tracks")) {
				array[0] = Integer.parseInt(args[0].split("=")[1]);
				array[1] = Integer.parseInt(args[1].split("=")[1]);
			} else if (args[1].contains("--workers") && args[0].contains("--tracks")) {
				array[0] = Integer.parseInt(args[1].split("=")[1]);
				array[1] = Integer.parseInt(args[0].split("=")[1]);
			} else if (args[0].contains("-w")) {
				array[0] = Integer.parseInt(args[1]);
				array[1] = array[0] * 4;
			} else if (args[0].contains("-t")) {
				array[1] = Integer.parseInt(args[1]);
				array[0] = Runtime.getRuntime().availableProcessors();
			}
		} else if (args.length == 4) {
			if (args[0].contains("-w")) {
				array[0] = Integer.parseInt(args[1]);
				array[1] = Integer.parseInt(args[3]);
			} else if (args[0].contains("-t")) {
				array[1] = Integer.parseInt(args[1]);
				array[0] = Integer.parseInt(args[3]);
			}
		}
		return array;
	}

}
