package hr.fer.oprpp1.custom.collections;

public class ArrayIndexedCollection extends Collection {
	private int size;
	private Object[] elements;
	
	public ArrayIndexedCollection(int initialCapacity) {
		if (initialCapacity < 1) throw new IllegalArgumentException();
		this.size = 0;
		this.elements = new Object[initialCapacity];
	}
	
	public ArrayIndexedCollection() {
		this(16);
	}
	
	public ArrayIndexedCollection(Collection collection, int initialCapacity) {
		if (collection == null) throw new NullPointerException();
		size = collection.size();
		this.elements = new Object[collection.size() > initialCapacity ? collection.size() : initialCapacity];
		this.elements = collection.toArray();
	}
	
	public ArrayIndexedCollection(Collection collection) {
		this(collection, 0);
	}
	
	public void add(Object value) {
		if (value.equals(null)) throw new NullPointerException();
		if (this.size() == this.elements.length) {
			ArrayIndexedCollection tmp = new ArrayIndexedCollection(this.size()*2);
			for (int i = 0; i < this.size(); i++) {
				tmp.elements[i] = this.elements[i];
			}
			this.elements = tmp.elements;			
		}
		this.elements[this.size++] = value;
	}
	
	public Object get(int index) {
		if (index < 0 || index > this.size() - 1) 
			throw new IndexOutOfBoundsException();
		return this.elements[index];
	}
	
	public void clear() {
		for (int i = 0; i < this.size(); i++) {
			this.elements[i] = null;
		}
		this.size = 0;
	}
	
	public void insert(Object value, int position) {
		if (value.equals(null)) throw new NullPointerException();
		if (position < 0 || position > this.size()) throw new IndexOutOfBoundsException();
		if (position != this.size()) {
			for (int i = this.size(); i > position; i--) {
				this.elements[i] = this.elements[i - 1];
			}
		}
		this.elements[position] = value;
		this.size++;
	}
	
	public int indexOf(Object value) {
		if (!(value.equals(null))) {
			for (int i = 0; i < this.size(); i++) {
				if (value.equals(this.elements[i])) return i;
			}
		}
		return -1;
	}
	
	public void remove(int index) {
		if (index < 0 || index >= this.size()) throw new IndexOutOfBoundsException();
		if (index != this.size() - 1) {
			for (int i = index; i < this.size() - 1; i--) {
				this.elements[i] = this.elements[i + 1];
			}
		}
		this.elements[this.size() - 1] = null;
		this.size--;
	}
		
	public boolean isEmpty() {
		return this.size() == 0;
	}
	
	public int size() {
		return this.size;
	}
	
	public boolean contains(Object value) {
		return false;
	}

	public Object[] toArray() {
		throw new UnsupportedOperationException();
	}
	
	public void forEach(Processor processor) {
		for (int i = 0; i < this.size(); i++) {
			processor.process(this.elements[i]);
		}
	}
	
	public void addAll(Collection other) {
		class AddAllProcessor extends Processor {
			public void process(Object value) {
				add(value);
			}
		}
		
		other.forEach(new AddAllProcessor());
	}
	
	public boolean remove(Object value) {
		return false;	
	}
}
