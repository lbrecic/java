package hr.fer.oprpp1.custom.collections;

/**
 * Class <code>Collection</code> enables users to work with collections.
 * 
 * @author Luka Brečić
 * @version 1.0
 */
public class Collection {
	
	/**
	 * Protected default constructor.
	 */
	protected Collection() {}
	
	/**
	 * Method checks if collection is empty.
	 * 
	 * @return <code>true</code> if collection is empty, <code>false</code> if not.
	 */
	public boolean isEmpty() {
		return this.size() == 0;
	}
	
	/**
	 * Method gets number of objects currently stored in collection.
	 * 
	 * @return number of objects in collection.
	 */
	public int size() {
		return 0;
	}
	
	/**
	 * Method adds object into collection.
	 * 
	 * @param value an object that is added into collection.
	 */
	public void add(Object value) {}
	
	/**
	 * Method checks if collections contains given object using the method <code>equals</code>.
	 * 
	 * @param value an object whose existence we are checking within the collection.
	 * @return <code>true</code> if collection contains given object, <code>false</code> otherwise.
	 */
	public boolean contains(Object value) {
		return false;
	}
	
	/**
	 * Metoda provjerava sadrži li kolekcija zadani objekt koristeći metodu <code>equals</code>
	 * te uklanja jedno pojavljivanje objekta (u ovom razredu nije određeno koje pojavljivanje).
	 * 
	 * @param value objekt koji uklanjamo ukoliko se nalazi u kolekciji.
	 * @return <code>true</code> ako uspješno uklonimo objekt, <code>false</code> inače.
	 */
	public boolean remove(Object value) {
		return false;	
	}
	
	/**
	 * Metoda alocira niz veličine kolekcije, napuni se sadržajom kolekcije te vraća novonsatali niz.
	 * Metoda ne može vratiti <code>null</code>.
	 * 
	 * @return kolekciju kao niz.
	 * @throws UnsupportedOperationException
	 */
	public Object[] toArray() {
		throw new UnsupportedOperationException();
	}
	
	/**
	 * Metoda poziva <code>Processor.process(.)</code> za svaki element kolekcije.
	 * Redoslijed kojim će elementi biti poslani nije definiran.
	 * 
	 * @param processor tip procesora koji obavlja zadaću nad elementima.
	 */
	public void forEach(Processor processor) {}
	
	/**
	 * Metoda dodaje elemente zadane kolekcije u trenutnu kolekciju. Pritom zadana kolekcija ostaje nepromijenjena.
	 * Lokalnim razredom definiramo procesor koji dodaje elemente u trenut kolekciju metodom <code>add</code>.
	 * Dodavanje je obavljeno metodom <code>forEach</code> nad zadanom kolekcijom s instancom lokalnog razreda kao aregumentom.
	 * 
	 * @param other kolekcija čije elemente dodajemo u trenutnu kolekciju.
	 */
	public void addAll(Collection other) {
		class AddAllProcessor extends Processor {
			public void process(Object value) {
				add(value);
			}
		}

		other.forEach(new AddAllProcessor());
	}
	
	/**
	 * Metoda uklanja sve elemente iz kolekcije.
	 */
	public void clear() {}
}
